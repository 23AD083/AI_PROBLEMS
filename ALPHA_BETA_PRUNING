import math

AI = 'X'
HUMAN = 'O'
EMPTY = ' '

def create_board():
    return [[EMPTY] * 3 for _ in range(3)]

def is_winner(board, player):
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    return board[0][0] == board[1][1] == board[2][2] == player or \
           board[0][2] == board[1][1] == board[2][0] == player

def is_full(board):
    return all(cell != EMPTY for row in board for cell in row)

def evaluate(board):
    if is_winner(board, AI):
        return 10
    elif is_winner(board, HUMAN):
        return -10
    return 0

def get_moves(board):
    return [(i, j) for i in range(3) for j in range(3) if board[i][j] == EMPTY]

def alpha_beta(board, depth, alpha, beta, maximizing):
    score = evaluate(board)
    if score in [10, -10] or is_full(board):
        return score

    moves = get_moves(board)

    if maximizing:
        max_eval = -math.inf
        for i, j in moves:
            board[i][j] = AI
            eval = alpha_beta(board, depth + 1, alpha, beta, False)
            board[i][j] = EMPTY
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for i, j in moves:
            board[i][j] = HUMAN
            eval = alpha_beta(board, depth + 1, alpha, beta, True)
            board[i][j] = EMPTY
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def find_best_move(board):
    best_val = -math.inf
    best_move = None
    for i, j in get_moves(board):
        board[i][j] = AI
        move_val = alpha_beta(board, 0, -math.inf, math.inf, False)
        board[i][j] = EMPTY
        if move_val > best_val:
            best_val = move_val
            best_move = (i, j)
    return best_move
